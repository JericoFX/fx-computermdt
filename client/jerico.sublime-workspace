{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"onplay",
				"OnPlayerLoaded"
			],
			[
				"onpla",
				"OnPlayerLoaded"
			],
			[
				"function",
				"function ()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "local Reports = {}\nlocal Polices = {}\n\nrequire(\"glm\")\nCreateThread(function()\n    Wait(200)\n\n    exports[\"qb-target\"]:AddBoxZone(\"pc\", vector3(442.26, -979.67, 30.69), 0.4, 1.6, {-- The name has to be unique, the coords a vector3 as shown, the 1.5 is the length of the boxzone and the 1.6 is the width of the boxzone, the length and width have to be float values\n        name = \"pc\", -- This is the name of the zone recognized by PolyZone, this has to be unique so it doesn't mess up with other zones\n        heading = 359, -- The heading of the boxzone, this has to be a float value\n        debugPoly = false, -- This is for enabling/disabling the drawing of the box, it accepts only a boolean value (true or false), when true it will draw the polyzone in green\n        minZ = 30.40,\n        maxZ = 30.89, -- This is the top of the boxzone, this can be different from the Z value in the coords, this has to be a float value\n        }, {\n        options = {-- This is your options table, in this table all the options will be specified for the target to accept\n            {-- This is the first table with options, you can make as many options inside the options table as you want\n                type = \"client\", -- This specifies the type of event the target has to trigger on click, this can be \"client\", \"server\", \"command\" or \"qbcommand\", this is OPTIONAL and will only work if the event is also specified\n                event = \"fx-mdt:client:openTablet\", -- This is the event it will trigger on click, this can be a client event, server event, command or qbcore registered command, NOTICE: Normal command can't have arguments passed through, QBCore registered ones can have arguments passed through\n                icon = \"fas fa-desktop\", -- This is the icon that will display next to this trigger option\n                label = \"Open Computer\", -- This is the label of this option which you would be able to click on to trigger everything, this has to be a string<i class=\"fa-solid fa-desktop\"></i>\n                targeticon = \"fas fa-desktop\", -- This is the icon of the target itself, the icon changes to this when it turns blue on this specific option, this is OPTIONAL\n                item = false, -- This is the item it has to check for, this option will only show up if the player has this item, this is OPTIONAL\n                action = false,\n                canInteract = false,\n                job = \"police\", -- This is the job, this option won't show up if the player doesn't have this job, this can also be done with multiple jobs and grades, if you want multiple jobs you always need a grade with it: job = {[\"police\"] = 0, [\"ambulance\"] = 2},\n                gang = false, -- This is the gang, this option won't show up if the player doesn't have this gang, this can also be done with multiple gangs and grades, if you want multiple gangs you always need a grade with it: gang = {[\"ballas\"] = 0, [\"thelostmc\"] = 2},\n                citizenid = false, -- This is the citizenid, this option won't show up if the player doesn't have this citizenid, this can also be done with multiple citizenid's, if you want multiple citizenid's there is a specific format to follow: citizenid = {[\"JFD98238\"] = true, [\"HJS29340\"] = true},\n            },\n        },\n        distance = 2.5, -- This is the distance for you to be at for the target to turn blue, this is in GTA units and has to be a float value\n    })\nend)\nlocal IS_IN = false\nCreateThread(function()\n    local Pay = BoxZone:Create(vector3(440.8, -981.13, 30.69), 1.2, 5.8, {\n        name = \"payfine\",\n        heading = 0,\n        --debugPoly=true\n    })\n\n    Pay:onPointInOut(PolyZone.getPlayerPosition, function(isPointInside, point)\n        IS_IN = isPointInside\n    end)\nend)\n                           \nRegisterCommand(\"+openfinesPay\", function()\n    local data = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    local Menu = {}\n    local Citizenid = QBCore.Functions.GetPlayerData().citizenid\n    if IS_IN then\n        QBCore.Functions.TriggerCallback(\"fx-mdt:server:getFines\", function(fines)\n            if #fines > 0 then\n                for k, v in pairs(fines) do\n                    local el = fines[k]\n                    Menu[#Menu + 1] = {\n                        header = el.title,\n                        txt = \"ID \" .. el.id .. \"Amount \" .. el.amount and el.amount or 0 .. \" Title: \",\n                        params = {\n                            event = \"fx-client:payFine\",\n                            args = {\n                                amount = el.amount,\n                                id = el.id,\n                            },\n                        },\n                    }\n                end\n                exports[\"qb-menu\"]:openMenu(Menu)\n            else\n                QBCore.Functions.Notify(\"No fines to pay\")\n            end\n        end, Citizenid)\n    end\nend, false)\nRegisterNetEvent(\"fx-client:payFine\", function(data)\n    local Amount = data.amount\n    local ID = data.id\n    QBCore.Functions.TriggerCallback(\"fx-mdt:server:payFine\", function(haspay)\n        if haspay then\n            QBCore.Functions.Notify(\"Pagaste la Multa\")\n        end\n\n    end, Amount, ID)\n\nend)\nRegisterCommand(\"-openfinesPay\", function() end, false)\nRegisterKeyMapping(\"+openfinesPay\", \"Open Fines\", \"keyboard\", \"e\")\n\nRegisterNetEvent(\"QBCore:Client:OnPlayerLoaded\", function()\n    local data = QBCore.Functions.GetPlayerData().job.name\n    if not data == \"police\" then\n        return\n    end\n    TriggerServerEvent(\"fx-mdt:server:UpdateReports\")\nend)\n\nRegisterNetEvent(\"fx-mdt:client:UpdateReports\", function(Reportes)\n    Reports = {}\n    Reports = Reportes\n    SendData(\"updateReports\", {reports = Reports})\nend)\nfunction SendData(action, data)\n    if action and type(data) == \"table\" then\n        SendNUIMessage({\n            action = action,\n            data = data,\n        })\n    else\n        Citizen.Trace(\"No Action Detected, or data is not a table\")\n    end\nend\n\nRegisterNetEvent(\"fx-mdt:client:openTablet\", function()\n    TriggerServerEvent(\"fx-mdt:server:UpdateReports\")\n    local metadata, citizenid, charinfo, job in QBCore.Functions.GetPlayerData()\n    SendData(\"openTablet\", {\n        isvisible = true,\n        userdata = {\n            callsign = metadata.callsign,\n            name = charinfo.firstname .. \" \" .. charinfo.lastname,\n            isboss = job.isboss,\n            citizenid = citizenid,\n        },\n        type = \"pc\",\n        langs = Config.LangAvaliable,\n        onduty = job.onduty,\n        defaultLang = Config.DefaultLang,\n    })\n    SetNuiFocus(true, true)\nend)\n\nRegisterCommand(\"mdt\", function(source, args)\n    TriggerServerEvent(\"fx-mdt:server:UpdateReports\")\n    local ped = PlayerPedId()\n    local veh = GetEntityModel(GetVehiclePedIsIn(ped))\n    local metadata, citizenid, charinfo, job in QBCore.Functions.GetPlayerData()\n    if Config.AllowedCars[veh] then\n        SendData(\"openTablet\", {\n            isvisible = true,\n            name = QBCore.Functions.GetPlayerData().firstname,\n            userdata = {\n                callsign = metadata.callsign,\n                name = charinfo.firstname .. \" \" .. charinfo.lastname,\n                isboss = job.isboss,\n                citizenid = citizenid,\n            },\n            type = \"car\",\n            onduty = job.onduty,\n            langs = Config.LangAvaliable,\n            defaultLang = Config.DefaultLang,\n        })\n        SetNuiFocus(true, true)\n    else\n        QBCore.Functions.Notify(\"Not in a police vehicle\", \"error\")\n    end\nend, false)\nRegisterNetEvent(\"fx-mdt:client:setReport\", function(data)\n    local Coords = GetEntityCoords(PlayerPedId())\n    local x, y, z in Coords\n    local StreetHash = GetStreetNameAtCoord(x, y, z)\n    local StreetName = GetStreetNameFromHashKey(StreetHash)\n    --local citizenid,charinfo in QBCore.Functions.GetPlayerData()\n    local dialog = exports[\"qb-input\"]:ShowInput({\n        header = \"menu\",\n        submitText = \"Add Message\",\n        inputs = {\n            {\n                text = \"Insert Message here\", -- text you want to be displayed as a place holder\n                name = \"message\", -- name of the input should be unique otherwise it might override\n                type = \"text\", -- type of the input\n                isRequired = true, -- Optional [accepted values: true | false] but will submit the form if no value is inputted\n                -- default = \"CID-1234\", -- Default text option, this is optional\n            },\n        },\n    })\n    if not dialog.message then\n        QBCore.Functions.Notify(\"Need to put a message\")\n        return\n    else\n        TriggerServerEvent(\"fx-mdt:server:newReportFromCommand\", {\n            streetName = StreetName,\n            coords = Coords,\n            name = charinfo.firstname,\n            lastname = charinfo.lastname,\n            citizenid = citizenid,\n            phone = charinfo.phone,\n            message = dialog.message,\n        })\n        QBCore.Functions.Notify(\"Report Sended\")\n    end\nend)\nRegisterNetEvent(\"fx-mdt:client:sendUpdateCalls\", function(calls)\n    SendData(\"getMycalls\", {calls = calls})\nend)\n-- local NPC = nil\n-- Citizen.CreateThread(function()\n-- local model = GetHashKey(\"a_m_y_hasjew_01\")\n-- RequestModel(model)\n-- while not HasModelLoaded(model) do\n-- Citizen.Wait(0)\n-- end\n-- local locPed = CreatePed(4, model, vector4(-691.72, -1084.41, 13.96 - 1, 89.14), false, true)\n-- NPC = locPed\n-- PlaceObjectOnGroundProperly(locPed)\n-- FreezeEntityPosition(locPed, true)\n-- SetEntityInvincible(locPed, true)\n-- SetBlockingOfNonTemporaryEvents(locPed, true)\n-- SetEntityAsMissionEntity(locPed, false, true)\n-- SetModelAsNoLongerNeeded(model)\n-- Wait(100)\n-- exports[\"qb-target\"]:AddTargetEntity(locPed, {\n-- options = {\n-- {\n-- type = \"server\",\n-- event = \"fx-apartment:server:CheckTicket\",\n-- icon = \"fas fa-hands\",\n-- label = \"Change Ticket\",\n-- item = \"gold_ticket_app\",\n-- },\n-- },\n-- distance = 3,\n-- })\n-- end)\n\n-- AddEventHandler(\"onResourceStop\", function(name)\n-- if name == GetCurrentResourceName() then\n-- DeleteEntity(NPC)\n-- end\n-- end)\n",
			"file": "client.lua",
			"file_size": 10260,
			"file_write_time": 132944504963319009,
			"settings":
			{
				"buffer_size": 10061,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSDAAAAAAAAJIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHCQAAAAAAAIcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\nonpla"
					},
					"BgAAAKgOAAAAAAAAqQ4AAAAAAAAAAAAAqQ4AAAAAAACqDgAAAAAAAAAAAACqDgAAAAAAAKsOAAAAAAAAAAAAAKsOAAAAAAAArA4AAAAAAAAAAAAArA4AAAAAAACtDgAAAAAAAAAAAACtDgAAAAAAAK4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqA4AAAAAAACoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_completion",
					{
						"completion": "local QBCore = exports['qb-core']:GetCoreObject()",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "OnPlayerLoaded"
					},
					"AgAAAKkOAAAAAAAAqQ4AAAAAAAAFAAAAb25wbGGpDgAAAAAAANoOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg4AAAAAAACuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					3,
					"left_delete",
					null,
					"AwAAANkOAAAAAAAA2Q4AAAAAAAABAAAAKdgOAAAAAAAA2A4AAAAAAAABAAAAKNcOAAAAAAAA1w4AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA2g4AAAAAAADaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAKkOAAAAAAAAqQ4AAAAAAAAuAAAAbG9jYWwgUUJDb3JlID0gZXhwb3J0c1sncWItY29yZSddOkdldENvcmVPYmplYw",
					"AQAAAAAAAAABAAAA1w4AAAAAAACpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "onplka"
					},
					"BgAAAKkOAAAAAAAAqg4AAAAAAAAAAAAAqg4AAAAAAACrDgAAAAAAAAAAAACrDgAAAAAAAKwOAAAAAAAAAAAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQ4AAAAAAACpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAAK4OAAAAAAAArg4AAAAAAAABAAAAYa0OAAAAAAAArQ4AAAAAAAABAAAAa6wOAAAAAAAArA4AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAArw4AAAAAAACvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "la"
					},
					"AgAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArA4AAAAAAACsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAK4OAAAAAAAArw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg4AAAAAAACuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_completion",
					{
						"completion": "local QBCore = exports['qb-core']:GetCoreObject()",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "OnPlayerLoaded"
					},
					"AgAAAKkOAAAAAAAAqQ4AAAAAAAAGAAAAb25wbGF5qQ4AAAAAAADaDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArw4AAAAAAACvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "                             "
					},
					"HQAAANoOAAAAAAAA2w4AAAAAAAAAAAAA2w4AAAAAAADcDgAAAAAAAAAAAADcDgAAAAAAAN0OAAAAAAAAAAAAAN0OAAAAAAAA3g4AAAAAAAAAAAAA3g4AAAAAAADfDgAAAAAAAAAAAADfDgAAAAAAAOAOAAAAAAAAAAAAAOAOAAAAAAAA4Q4AAAAAAAAAAAAA4Q4AAAAAAADiDgAAAAAAAAAAAADiDgAAAAAAAOMOAAAAAAAAAAAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAADlDgAAAAAAAOYOAAAAAAAAAAAAAOYOAAAAAAAA5w4AAAAAAAAAAAAA5w4AAAAAAADoDgAAAAAAAAAAAADoDgAAAAAAAOkOAAAAAAAAAAAAAOkOAAAAAAAA6g4AAAAAAAAAAAAA6g4AAAAAAADrDgAAAAAAAAAAAADrDgAAAAAAAOwOAAAAAAAAAAAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA7Q4AAAAAAADuDgAAAAAAAAAAAADuDgAAAAAAAO8OAAAAAAAAAAAAAO8OAAAAAAAA8A4AAAAAAAAAAAAA8A4AAAAAAADxDgAAAAAAAAAAAADxDgAAAAAAAPIOAAAAAAAAAAAAAPIOAAAAAAAA8w4AAAAAAAAAAAAA8w4AAAAAAAD0DgAAAAAAAAAAAAD0DgAAAAAAAPUOAAAAAAAAAAAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA9g4AAAAAAAD3DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2g4AAAAAAADaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAKkOAAAAAAAAqQ4AAAAAAAAzAAAAbG9jYWwgUUJDb3JlID0gZXhwb3J0c1sncWItY29yZSddOkdldENvcmVPYmplY3QoKSAg",
					"AQAAAAAAAAABAAAA3A4AAAAAAACpDgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/CCallsign.svelte",
			"settings":
			{
				"buffer_size": 1919,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "\nasddsa"
					},
					"CAAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAACeAQAAAAAAAAAAAACeAQAAAAAAAJ8BAAAAAAAAAAAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAAoAEAAAAAAAChAQAAAAAAAAAAAAChAQAAAAAAAKIBAAAAAAAAAAAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACkAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAQAAAAAAAJwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAQAAAAAAAKQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmAQAAAAAAAKYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					4,
					"left_delete",
					null,
					"BAAAAKcBAAAAAAAApwEAAAAAAAABAAAAZqYBAAAAAAAApgEAAAAAAAABAAAAIKUBAAAAAAAApQEAAAAAAAABAAAAPaQBAAAAAAAApAEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAQAAAAAAAKgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAQAAAAAAAKQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					2,
					"left_delete",
					null,
					"AwAAAJ0BAAAAAAAAnQEAAAAAAAAHAAAACWFzZGRzYZ4BAAAAAAAAngEAAAAAAAABAAAACZwBAAAAAAAAnAEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAQAAAAAAAJ0BAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server/server.lua",
			"settings":
			{
				"buffer_size": 18305,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					84,
					2,
					"left_delete",
					null,
					"AgAAABIbAAAAAAAAEhsAAAAAAAAWAAAAICAgIGxvY2FsIEJ1bGxldHMgPSB7fREbAAAAAAAAERsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoGwAAAAAAABIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARGwAAAAAAABEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiAAAAAAAAAOIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAOMAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADlAAAAAAAAAAAAAADlAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOkAAAAAAAAAAAAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAAAAAAAAAOMAAAAAAAAAAAAAAAAAAAA"
				],
				[
					114,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"function ()\",\"sortText\":\"0001\",\"kind\":15,\"insertText\":\"function $1($2)\\n\\t$0\\nend\",\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "function ()"
					},
					"AgAAAOMAAAAAAAAA4wAAAAAAAAAIAAAAZnVuY3Rpb27jAAAAAAAAAPQAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAAAAAAAAAOsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "IsPolice"
					},
					"CAAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA7QAAAAAAAADuAAAAAAAAAAAAAADuAAAAAAAAAO8AAAAAAAAAAAAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAADxAAAAAAAAAPIAAAAAAAAAAAAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsAAAAAAAAAOwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"IsPolice\",\"sortText\":\"0001\",\"kind\":1,\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "IsPolice"
					},
					"AgAAAOwAAAAAAAAA7AAAAAAAAAAIAAAASXNQb2xpY2XsAAAAAAAAAPQAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0AAAAAAAAAPQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "src"
					},
					"AwAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA9gAAAAAAAAD3AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1AAAAAAAAAPUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\nlocal"
					},
					"BwAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAD7AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAAA/QAAAAAAAAAAAAAA/QAAAAAAAAD+AAAAAAAAAAAAAAD+AAAAAAAAAP8AAAAAAAAAAAAAAP8AAAAAAAAAAAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AAAAAAAAAPkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAABAAAAAAAAAQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAEBAAAAAAAAAgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAAIBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAAEAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAQAAAAAAAAIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " sr"
					},
					"AwAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					4,
					"left_delete",
					null,
					"BAAAAAYBAAAAAAAABgEAAAAAAAABAAAAcgUBAAAAAAAABQEAAAAAAAABAAAAcwQBAAAAAAAABAEAAAAAAAABAAAAIAMBAAAAAAAAAwEAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAAMBAAAAAAAABAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " src"
					},
					"BAAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAACAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"src\",\"data\":{\"id\":77,\"uri\":\"file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/server/server.lua\"},\"sortText\":\"0001\",\"kind\":6,\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "src"
					},
					"AgAAAAUBAAAAAAAABQEAAAAAAAADAAAAc3JjBQEAAAAAAAAIAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAAgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "\nlocal"
					},
					"BwAAAAgBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA4BAAAAAAAAAAAAAA4BAAAAAAAADwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAAgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " Player"
					},
					"BwAAAA8BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABIBAAAAAAAAAAAAABIBAAAAAAAAEwEAAAAAAAAAAAAAEwEAAAAAAAAUAQAAAAAAAAAAAAAUAQAAAAAAABUBAAAAAAAAAAAAABUBAAAAAAAAFgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABYBAAAAAAAAFwEAAAAAAAAAAAAAFwEAAAAAAAAYAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWAQAAAAAAABYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " Player"
					},
					"BwAAABgBAAAAAAAAGQEAAAAAAAAAAAAAGQEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAQAAAAAAABgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					6,
					"left_delete",
					null,
					"BgAAAB4BAAAAAAAAHgEAAAAAAAABAAAAch0BAAAAAAAAHQEAAAAAAAABAAAAZRwBAAAAAAAAHAEAAAAAAAABAAAAeRsBAAAAAAAAGwEAAAAAAAABAAAAYRoBAAAAAAAAGgEAAAAAAAABAAAAbBkBAAAAAAAAGQEAAAAAAAABAAAAUA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "QB"
					},
					"AgAAABkBAAAAAAAAGgEAAAAAAAAAAAAAGgEAAAAAAAAbAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAQAAAAAAABkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"QBCore\",\"data\":{\"id\":96,\"uri\":\"file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/server/server.lua\"},\"sortText\":\"0001\",\"kind\":6,\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QBCore"
					},
					"AgAAABkBAAAAAAAAGQEAAAAAAAACAAAAUUIZAQAAAAAAAB8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": ".Functions."
					},
					"CwAAAB8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAnAQAAAAAAAAAAAAAnAQAAAAAAACgBAAAAAAAAAAAAACgBAAAAAAAAKQEAAAAAAAAAAAAAKQEAAAAAAAAqAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAAC0BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAQAAAAAAACoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"GetPlayer\",\"data\":{\"id\":112,\"uri\":\"file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/server/server.lua\"},\"sortText\":\"0001\",\"kind\":5,\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "GetPlayer"
					},
					"AgAAACoBAAAAAAAAKgEAAAAAAAADAAAAZ2V0KgEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAQAAAAAAAC0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMBAAAAAAAANQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "src"
					},
					"AwAAADQBAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA2AQAAAAAAAAAAAAA2AQAAAAAAADcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0AQAAAAAAADQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					2,
					"left_delete",
					null,
					"AgAAADYBAAAAAAAANgEAAAAAAAABAAAAYzUBAAAAAAAANQEAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\nlocal"
					},
					"BwAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOgEAAAAAAAAAAAAAOgEAAAAAAAA7AQAAAAAAAAAAAAA7AQAAAAAAADwBAAAAAAAAAAAAADwBAAAAAAAAPQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": " Job"
					},
					"BAAAAD0BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAEABAAAAAAAAAAAAAEABAAAAAAAAQQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9AQAAAAAAAD0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEEBAAAAAAAAQgEAAAAAAAAAAAAAQgEAAAAAAABDAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBAQAAAAAAAEEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " Player.P"
					},
					"CQAAAEMBAAAAAAAARAEAAAAAAAAAAAAARAEAAAAAAABFAQAAAAAAAAAAAABFAQAAAAAAAEYBAAAAAAAAAAAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAEkBAAAAAAAASgEAAAAAAAAAAAAASgEAAAAAAABLAQAAAAAAAAAAAABLAQAAAAAAAEwBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDAQAAAAAAAEMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "layerData."
					},
					"CgAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAABOAQAAAAAAAE8BAAAAAAAAAAAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABRAQAAAAAAAAAAAABRAQAAAAAAAFIBAAAAAAAAAAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAQAAAAAAAEwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "job.name"
					},
					"CAAAAFYBAAAAAAAAVwEAAAAAAAAAAAAAVwEAAAAAAABYAQAAAAAAAAAAAABYAQAAAAAAAFkBAAAAAAAAAAAAAFkBAAAAAAAAWgEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAABbAQAAAAAAAFwBAAAAAAAAAAAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABeAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAQAAAAAAAFYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGABAAAAAAAAYQEAAAAAAAAAAAAAYQEAAAAAAABiAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgAQAAAAAAAGABAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " Job"
					},
					"BAAAAGIBAAAAAAAAYwEAAAAAAAAAAAAAYwEAAAAAAABkAQAAAAAAAAAAAABkAQAAAAAAAGUBAAAAAAAAAAAAAGUBAAAAAAAAZgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAQAAAAAAAGIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAGYBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABoAQAAAAAAAAAAAABoAQAAAAAAAGkBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmAQAAAAAAAGYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkBAAAAAAAAagEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpAQAAAAAAAGkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGoBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqAQAAAAAAAGoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "police"
					},
					"BgAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAABtAQAAAAAAAG4BAAAAAAAAAAAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAQAAAAAAAGsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " then"
					},
					"BQAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAB0AQAAAAAAAHUBAAAAAAAAAAAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByAQAAAAAAAHIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"label\":\"then .. end\",\"sortText\":\"0001\",\"kind\":15,\"insertText\":\"then\\n\\t$0\\nend\",\"insertTextFormat\":2},\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "then .. end"
					},
					"AgAAAHMBAAAAAAAAcwEAAAAAAAAEAAAAdGhlbnMBAAAAAAAAfwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3AQAAAAAAAHcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAHoBAAAAAAAAewEAAAAAAAAAAAAAewEAAAAAAAB8AQAAAAAAAAAAAAB8AQAAAAAAAH0BAAAAAAAAAAAAAH0BAAAAAAAAfgEAAAAAAAAAAAAAfgEAAAAAAAB/AQAAAAAAAAAAAAB/AQAAAAAAAIABAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6AQAAAAAAAHoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAIABAAAAAAAAgQEAAAAAAAAAAAAAgQEAAAAAAACCAQAAAAAAAAAAAACCAQAAAAAAAIMBAAAAAAAAAAAAAIMBAAAAAAAAhAEAAAAAAAAAAAAAhAEAAAAAAACFAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAQAAAAAAAIABAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\nelse"
					},
					"CAAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACIAQAAAAAAAAAAAACIAQAAAAAAAIkBAAAAAAAAAAAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACLAQAAAAAAAAAAAACLAQAAAAAAAIwBAAAAAAAAAAAAAIYBAAAAAAAAhgEAAAAAAAACAAAACQmGAQAAAAAAAIcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFAQAAAAAAAIUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAIsBAAAAAAAAjAEAAAAAAAAAAAAAjAEAAAAAAACNAQAAAAAAAAAAAACNAQAAAAAAAI4BAAAAAAAAAAAAAI4BAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACQAQAAAAAAAAAAAACQAQAAAAAAAJEBAAAAAAAAAAAAAJEBAAAAAAAAkgEAAAAAAAAAAAAAkgEAAAAAAACTAQAAAAAAAAAAAACTAQAAAAAAAJQBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAQAAAAAAAIsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAJQBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACWAQAAAAAAAAAAAACWAQAAAAAAAJcBAAAAAAAAAAAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAACZAQAAAAAAAJoBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFAQAAAAAAAIUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "Create"
					},
					"BgAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAQAAAAAAAMIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert_completion",
					{
						"completion": "QBCore.Functions.GetPlayer(${1:brainSet})",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CreateCallback"
					},
					"AgAAAMIBAAAAAAAAwgEAAAAAAAAGAAAAQ3JlYXRlwgEAAAAAAADmAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAQAAAAAAAMgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"left_delete",
					null,
					"AQAAAMIBAAAAAAAAwgEAAAAAAAAkAAAAUUJDb3JlLkZ1bmN0aW9ucy5HZXRQbGF5ZXIoYnJhaW5TZXQp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAQAAAAAAAMIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAQAAAAAAAMIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "keymap"
					},
					"BgAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					6,
					"left_delete",
					null,
					"BgAAAMACAAAAAAAAwAIAAAAAAAABAAAAcL8CAAAAAAAAvwIAAAAAAAABAAAAYb4CAAAAAAAAvgIAAAAAAAABAAAAbb0CAAAAAAAAvQIAAAAAAAABAAAAebwCAAAAAAAAvAIAAAAAAAABAAAAZbsCAAAAAAAAuwIAAAAAAAABAAAAaw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAgAAAAAAAMECAAAAAAAAAAAAAAAA8L8"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "keymap"
					},
					"BgAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "key"
					},
					"BAAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC8AgAAAAAAAAYAAABrZXltYXC8AgAAAAAAAL0CAAAAAAAAAAAAAL0CAAAAAAAAvgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert_completion",
					{
						"completion": "RegisterCommand('+${1:name}', function() end, false) \n RegisterCommand('-${1:name}', function()\tend, false) \n RegisterKeyMapping('+${1:name}', '${2:description}', 'keyboard', '${3:letter}'))",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "keymap"
					},
					"AgAAALsCAAAAAAAAuwIAAAAAAAADAAAAa2V5uwIAAAAAAABgAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AgAAAAAAAL4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "function"
					},
					"GwAAADQDAAAAAAAANQMAAAAAAAAAAAAANQMAAAAAAAA1AwAAAAAAAAQAAABuYW1l/wIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADAAAAAAAABAAAAG5hbWXNAgAAAAAAAM4CAAAAAAAAAAAAAM4CAAAAAAAAzgIAAAAAAAAEAAAAbmFtZS8DAAAAAAAAMAMAAAAAAAAAAAAA/QIAAAAAAAD+AgAAAAAAAAAAAADOAgAAAAAAAM8CAAAAAAAAAAAAADIDAAAAAAAAMwMAAAAAAAAAAAAA/wIAAAAAAAAAAwAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAADUDAAAAAAAANgMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAADQAgAAAAAAANECAAAAAAAAAAAAADgDAAAAAAAAOQMAAAAAAAAAAAAAAwMAAAAAAAAEAwAAAAAAAAAAAADRAgAAAAAAANICAAAAAAAAAAAAADsDAAAAAAAAPAMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAADSAgAAAAAAANMCAAAAAAAAAAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAADTAgAAAAAAANQCAAAAAAAAAAAAAEEDAAAAAAAAQgMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAADUAgAAAAAAANUCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAMAAADNAgAAAAAAANECAAAAAAAAAAAAAAAA8L//AgAAAAAAAAMDAAAAAAAAAAAAAAAA8L80AwAAAAAAADgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					238,
					1,
					"left_delete",
					null,
					"AQAAALsCAAAAAAAAuwIAAAAAAACxAAAAUmVnaXN0ZXJDb21tYW5kKCcrZnVuY3Rpb24nLCBmdW5jdGlvbigpIGVuZCwgZmFsc2UpIAogUmVnaXN0ZXJDb21tYW5kKCctZnVuY3Rpb24nLCBmdW5jdGlvbigpCWVuZCwgZmFsc2UpIAogUmVnaXN0ZXJLZXlNYXBwaW5nKCcrZnVuY3Rpb24nLCAnZGVzY3JpcHRpb24nLCAna2V5Ym9hcmQnLCAnbGV0dGVyJykp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAwAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "keymap"
					},
					"BgAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"insert_completion",
					{
						"completion": "RegisterCommand('+${1:name}', function() \n end) \n RegisterCommand('-${1:name}', function()\n \tend) \n RegisterKeyMapping('+${1:name}', '${2:description}', 'keyboard', '${3:letter}')",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "keymap"
					},
					"AgAAALsCAAAAAAAAuwIAAAAAAAAGAAAAa2V5bWFwuwIAAAAAAABVAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAgAAAAAAAMECAAAAAAAAAAAAAAAA8L8"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "jericofx"
					},
					"GwAAACoDAAAAAAAAKwMAAAAAAAAAAAAAKwMAAAAAAAArAwAAAAAAAAQAAABuYW1l+gIAAAAAAAD7AgAAAAAAAAAAAAD7AgAAAAAAAPsCAAAAAAAABAAAAG5hbWXNAgAAAAAAAM4CAAAAAAAAAAAAAM4CAAAAAAAAzgIAAAAAAAAEAAAAbmFtZSUDAAAAAAAAJgMAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAADOAgAAAAAAAM8CAAAAAAAAAAAAACgDAAAAAAAAKQMAAAAAAAAAAAAA+gIAAAAAAAD7AgAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAACsDAAAAAAAALAMAAAAAAAAAAAAA/AIAAAAAAAD9AgAAAAAAAAAAAADQAgAAAAAAANECAAAAAAAAAAAAAC4DAAAAAAAALwMAAAAAAAAAAAAA/gIAAAAAAAD/AgAAAAAAAAAAAADRAgAAAAAAANICAAAAAAAAAAAAADEDAAAAAAAAMgMAAAAAAAAAAAAAAAMAAAAAAAABAwAAAAAAAAAAAADSAgAAAAAAANMCAAAAAAAAAAAAADQDAAAAAAAANQMAAAAAAAAAAAAAAgMAAAAAAAADAwAAAAAAAAAAAADTAgAAAAAAANQCAAAAAAAAAAAAADcDAAAAAAAAOAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAADUAgAAAAAAANUCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAMAAADNAgAAAAAAANECAAAAAAAAAAAAAAAA8L/6AgAAAAAAAP4CAAAAAAAAAAAAAAAA8L8qAwAAAAAAAC4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "algoquepaso"
					},
					"DAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAAA/AwAAAAAAAAsAAABkZXNjcmlwdGlvbj8DAAAAAAAAQAMAAAAAAAAAAAAAQAMAAAAAAABBAwAAAAAAAAAAAABBAwAAAAAAAEIDAAAAAAAAAAAAAEIDAAAAAAAAQwMAAAAAAAAAAAAAQwMAAAAAAABEAwAAAAAAAAAAAABEAwAAAAAAAEUDAAAAAAAAAAAAAEUDAAAAAAAARgMAAAAAAAAAAAAARgMAAAAAAABHAwAAAAAAAAAAAABHAwAAAAAAAEgDAAAAAAAAAAAAAEgDAAAAAAAASQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+AwAAAAAAAEkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AgAAAFkDAAAAAAAAWgMAAAAAAAAAAAAAWgMAAAAAAABaAwAAAAAAAAYAAABsZXR0ZXI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZAwAAAAAAAF8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					1,
					"left_delete",
					null,
					"AQAAALsCAAAAAAAAuwIAAAAAAAChAAAAUmVnaXN0ZXJDb21tYW5kKCcramVyaWNvZngnLCBmdW5jdGlvbigpIAogZW5kKSAKIFJlZ2lzdGVyQ29tbWFuZCgnLWplcmljb2Z4JywgZnVuY3Rpb24oKQogCWVuZCkgCiBSZWdpc3RlcktleU1hcHBpbmcoJytqZXJpY29meCcsICdhbGdvcXVlcGFzbycsICdrZXlib2FyZCcsICdlJyk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAwAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALsCAAAAAAAAvAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"lua_format",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/C/Program Files/Sublime Text/Packages/fivem.sublime-completions",
			"settings":
			{
				"buffer_size": 680804,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAINiCgAAAAAAhGIKAAAAAAAAAAAAhGIKAAAAAACFYgoAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg2IKAAAAAACDYgoAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAINiCgAAAAAAhGIKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg2IKAAAAAACDYgoAAAAAAAAAAAAAgEBA"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAIRiCgAAAAAA2GIKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhGIKAAAAAACEYgoAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "GetObject"
					},
					"CgAAAJJiCgAAAAAAk2IKAAAAAAAAAAAAk2IKAAAAAACTYgoAAAAAAAkAAABHZXRQbGF5ZXKTYgoAAAAAAJRiCgAAAAAAAAAAAJRiCgAAAAAAlWIKAAAAAAAAAAAAlWIKAAAAAACWYgoAAAAAAAAAAACWYgoAAAAAAJdiCgAAAAAAAAAAAJdiCgAAAAAAmGIKAAAAAAAAAAAAmGIKAAAAAACZYgoAAAAAAAAAAACZYgoAAAAAAJpiCgAAAAAAAAAAAJpiCgAAAAAAm2IKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkmIKAAAAAACbYgoAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AgAAAKtiCgAAAAAA3GIKAAAAAAAAAAAA3GIKAAAAAADcYgoAAAAAACkAAABRQkNvcmUuRnVuY3Rpb25zLkdldFBsYXllcigkezE6YnJhaW5TZXR9KQ",
					"AQAAAAAAAAABAAAA1GIKAAAAAACrYgoAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOBiCgAAAAAA4WIKAAAAAAAAAAAA4WIKAAAAAADjYgoAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4GIKAAAAAADgYgoAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"paste",
					null,
					"AQAAAONiCgAAAAAAP2MKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA42IKAAAAAADjYgoAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"paste",
					null,
					"AgAAAPFiCgAAAAAA/2IKAAAAAAAAAAAA/2IKAAAAAAD/YgoAAAAAAAkAAABHZXRPYmplY3Q",
					"AQAAAAAAAAABAAAA8WIKAAAAAAD6YgoAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEFjCgAAAAAAQmMKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQWMKAAAAAABBYwoAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAEJjCgAAAAAAg2MKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQmMKAAAAAABCYwoAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "Call"
					},
					"BQAAAE5jCgAAAAAAT2MKAAAAAAAAAAAAT2MKAAAAAABPYwoAAAAAADQAAABBIHNpbXBsZSwgbm9uLTxjb2RlPmFzeW5jPC9jb2RlPiBmdW5jdGlvbiBkZWZpbml0aW9uT2MKAAAAAABQYwoAAAAAAAAAAABQYwoAAAAAAFFjCgAAAAAAAAAAAFFjCgAAAAAAUmMKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATmMKAAAAAACCYwoAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAFJjCgAAAAAAU2MKAAAAAAAAAAAAU2MKAAAAAABUYwoAAAAAAAAAAABUYwoAAAAAAFVjCgAAAAAAAAAAAFVjCgAAAAAAVmMKAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUmMKAAAAAABSYwoAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " core"
					},
					"BQAAAFZjCgAAAAAAV2MKAAAAAAAAAAAAV2MKAAAAAABYYwoAAAAAAAAAAABYYwoAAAAAAFljCgAAAAAAAAAAAFljCgAAAAAAWmMKAAAAAAAAAAAAWmMKAAAAAABbYwoAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVmMKAAAAAABWYwoAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"LuaFormat: Settings"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"ci",
				"Convert Case: Title Case"
			],
			[
				"install ",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/client",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server"
	],
	"file_history":
	[
		"/C/Users/eduar/Downloads/fivem-natives-completions-master/completions/fivem.sublime-completions",
		"/C/Users/eduar/Downloads/fivem.sublime-completions",
		"/C/Users/eduar/AppData/Roaming/Sublime Text/Packages/ActionScript.sublime-package"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "client.lua",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10061,
						"regions":
						{
						},
						"selection":
						[
							[
								3459,
								3459
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/client/client.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/CCallsign.svelte",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1919,
						"regions":
						{
						},
						"selection":
						[
							[
								515,
								515
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'`/@<>*#$+^([@-:|",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-svelte"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/CCallsign.svelte",
							"show_definitions": false,
							"syntax": "Packages/Svelte/Svelte.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server/server.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18305,
						"regions":
						{
						},
						"selection":
						[
							[
								699,
								699
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/server/server.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Program Files/Sublime Text/Packages/fivem.sublime-completions",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 680804,
						"regions":
						{
						},
						"selection":
						[
							[
								680802,
								680802
							]
						],
						"settings":
						{
							"lsp_uri": "file:///C:/Program%20Files/Sublime%20Text/Packages/fivem.sublime-completions",
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 39.0,
						"translation.y": 114013.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.diagnostics":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "jerico.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
