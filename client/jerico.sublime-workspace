{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Re",
				"Reports"
			],
			[
				"di",
				"disabled"
			],
			[
				"text",
				"textarea"
			],
			[
				"script",
				"script"
			],
			[
				"for",
				"fori"
			],
			[
				"debug",
				"Debug"
			],
			[
				"Notify",
				"Notify"
			],
			[
				"onplay",
				"OnPlayerLoaded"
			],
			[
				"onpla",
				"OnPlayerLoaded"
			],
			[
				"function",
				"function ()"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte",
			"settings":
			{
				"buffer_size": 6633,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAJQLAAAAAAAAlAsAAAAAAAAxAAAACQkJCQljb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShjYlswXS5WZWhpY2xlcykpO5MLAAAAAAAAkwsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAxQsAAAAAAACUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\nobserva"
					},
					"CQAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAaAwAAAAAAAAAAAAAaAwAAAAAAABsDAAAAAAAAAAAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAgAwAAAAAAAAAAAAAgAwAAAAAAACEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwMAAAAAAAAXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "tions:"
					},
					"BgAAACEDAAAAAAAAIgMAAAAAAAAAAAAAIgMAAAAAAAAjAwAAAAAAAAAAAAAjAwAAAAAAACQDAAAAAAAAAAAAACQDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAAAmAwAAAAAAACcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACcDAAAAAAAAKQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwMAAAAAAAAnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACkDAAAAAAAAKgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQMAAAAAAAApAwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\nthis.ob"
					},
					"CQAAAO8DAAAAAAAA8AMAAAAAAAAAAAAA8AMAAAAAAADzAwAAAAAAAAAAAADzAwAAAAAAAPQDAAAAAAAAAAAAAPQDAAAAAAAA9QMAAAAAAAAAAAAA9QMAAAAAAAD2AwAAAAAAAAAAAAD2AwAAAAAAAPcDAAAAAAAAAAAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAD5AwAAAAAAAPoDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wMAAAAAAADvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gMAAAAAAAD6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_completion",
					{
						"completion": "observations",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "observations"
					},
					"AgAAAPgDAAAAAAAA+AMAAAAAAAADAAAAb2Jz+AMAAAAAAAAEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wMAAAAAAAD7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAQEAAAAAAAABQQAAAAAAAAAAAAABQQAAAAAAAAGBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAYEAAAAAAAABwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgQAAAAAAAAGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAcEAAAAAAAACQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwQAAAAAAAAHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAAByCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAsAAAAAAABsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"paste",
					null,
					"AQAAAHILAAAAAAAAlQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgsAAAAAAAByCwAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "obser"
					},
					"BgAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB+CwAAAAAAAAcAAAByZXBvcnRzfgsAAAAAAAB/CwAAAAAAAAAAAAB/CwAAAAAAAIALAAAAAAAAAAAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACCCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAACECwAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"commitCharacters\":[\".\",\",\",\"(\"],\"kind\":5,\"label\":\"observations\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte\",\"kind\":\"property\",\"name\":\"observations\",\"kindModifiers\":\"\",\"position\":{\"line\":118,\"character\":18},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "observations"
					},
					"AgAAAH0LAAAAAAAAfQsAAAAAAAAFAAAAb2JzZXJ9CwAAAAAAAIkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggsAAAAAAACCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "obx"
					},
					"BAAAAJILAAAAAAAAkwsAAAAAAAAAAAAAkwsAAAAAAACTCwAAAAAAAAcAAABSZXBvcnRzkwsAAAAAAACUCwAAAAAAAAAAAACUCwAAAAAAAJULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgsAAAAAAACZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"left_delete",
					null,
					"AQAAAJQLAAAAAAAAlAsAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAlQsAAAAAAACVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "serva"
					},
					"BQAAAJQLAAAAAAAAlQsAAAAAAAAAAAAAlQsAAAAAAACWCwAAAAAAAAAAAACWCwAAAAAAAJcLAAAAAAAAAAAAAJcLAAAAAAAAmAsAAAAAAAAAAAAAmAsAAAAAAACZCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAsAAAAAAACUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert_completion",
					{
						"completion": "observations",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "observations"
					},
					"AgAAAJILAAAAAAAAkgsAAAAAAAAHAAAAb2JzZXJ2YZILAAAAAAAAngsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQsAAAAAAACZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"paste",
					null,
					"AgAAAJILAAAAAAAAngsAAAAAAAAAAAAAngsAAAAAAACeCwAAAAAAAAwAAABvYnNlcnZhdGlvbnM",
					"AQAAAAAAAAABAAAAkgsAAAAAAACeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAEINAAAAAAAAQg0AAAAAAAASAAAAU2VhcmNoRGF0YS5yZXBvcnRzQg0AAAAAAABWDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVA0AAAAAAABCDQAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "reports:"
					},
					"CAAAAEMNAAAAAAAARA0AAAAAAAAAAAAARA0AAAAAAABFDQAAAAAAAAAAAABFDQAAAAAAAEYNAAAAAAAAAAAAAEYNAAAAAAAARw0AAAAAAAAAAAAARw0AAAAAAABIDQAAAAAAAAAAAABIDQAAAAAAAEkNAAAAAAAAAAAAAEkNAAAAAAAASg0AAAAAAAAAAAAASg0AAAAAAABLDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQw0AAAAAAABDDQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsNAAAAAAAATA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF4NAAAAAAAAXw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXg0AAAAAAABeDQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "observations:"
					},
					"DQAAAF8NAAAAAAAAYA0AAAAAAAAAAAAAYA0AAAAAAABhDQAAAAAAAAAAAABhDQAAAAAAAGINAAAAAAAAAAAAAGINAAAAAAAAYw0AAAAAAAAAAAAAYw0AAAAAAABkDQAAAAAAAAAAAABkDQAAAAAAAGUNAAAAAAAAAAAAAGUNAAAAAAAAZg0AAAAAAAAAAAAAZg0AAAAAAABnDQAAAAAAAAAAAABnDQAAAAAAAGgNAAAAAAAAAAAAAGgNAAAAAAAAaQ0AAAAAAAAAAAAAaQ0AAAAAAABqDQAAAAAAAAAAAABqDQAAAAAAAGsNAAAAAAAAAAAAAGsNAAAAAAAAbA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXw0AAAAAAABfDQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGwNAAAAAAAAbQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbA0AAAAAAABsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"left_delete",
					null,
					"AQAAAGwNAAAAAAAAbA0AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAbQ0AAAAAAABtDQAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "Searc"
					},
					"BQAAAGwNAAAAAAAAbQ0AAAAAAAAAAAAAbQ0AAAAAAABuDQAAAAAAAAAAAABuDQAAAAAAAG8NAAAAAAAAAAAAAG8NAAAAAAAAcA0AAAAAAAAAAAAAcA0AAAAAAABxDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbA0AAAAAAABsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "Dat"
					},
					"AwAAAHENAAAAAAAAcg0AAAAAAAAAAAAAcg0AAAAAAABzDQAAAAAAAAAAAABzDQAAAAAAAHQNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQ0AAAAAAABxDQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"commitCharacters\":[\".\",\",\",\"(\"],\"kind\":6,\"label\":\"SearchData\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte\",\"kind\":\"let\",\"name\":\"SearchData\",\"kindModifiers\":\"\",\"position\":{\"line\":139,\"character\":73},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SearchData"
					},
					"AgAAAGwNAAAAAAAAbA0AAAAAAAAIAAAAU2VhcmNEYXRsDQAAAAAAAHYNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdA0AAAAAAAB0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHYNAAAAAAAAdw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdg0AAAAAAAB2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AQAAAHYNAAAAAAAAdg0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAdw0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": ".i"
					},
					"AgAAAHYNAAAAAAAAdw0AAAAAAAAAAAAAdw0AAAAAAAB4DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdg0AAAAAAAB2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAAHcNAAAAAAAAdw0AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAeA0AAAAAAAB4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "ob"
					},
					"AgAAAHcNAAAAAAAAeA0AAAAAAAAAAAAAeA0AAAAAAAB5DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdw0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"commitCharacters\":[\".\",\",\",\"(\"],\"kind\":5,\"label\":\"observations\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte\",\"kind\":\"property\",\"name\":\"observations\",\"kindModifiers\":\"\",\"position\":{\"line\":139,\"character\":84},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "observations"
					},
					"AgAAAHcNAAAAAAAAdw0AAAAAAAACAAAAb2J3DQAAAAAAAIMNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ0AAAAAAAB5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert_snippet",
					{
						"contents": "[${0:$SELECTION}]"
					},
					"AgAAAEINAAAAAAAAQg0AAAAAAABCAAAAe3JlcG9ydHM6IFNlYXJjaERhdGEucmVwb3J0cyxvYnNlcnZhdGlvbnM6U2VhcmNoRGF0YS5vYnNlcnZhdGlvbnN9Qg0AAAAAAACGDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQg0AAAAAAACEDQAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					2,
					"left_delete",
					null,
					"AgAAAG0LAAAAAAAAbQsAAAAAAAAyAAAACQkJCQlTZWFyY2hEYXRhLm9ic2VydmF0aW9ucyA9IGNiWzBdLk9ic2VydmF0aW9ucztsCwAAAAAAAGwLAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAnwsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAACwNAAAAAAAALA0AAAAAAAAmAAAALG9ic2VydmF0aW9uczpTZWFyY2hEYXRhLm9ic2VydmF0aW9uc30",
					"AQAAAAAAAAABAAAAUg0AAAAAAAAsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"left_delete",
					null,
					"AQAAAA8NAAAAAAAADw0AAAAAAAAKAAAAW3tyZXBvcnRzOg",
					"AQAAAAAAAAABAAAAGQ0AAAAAAAAPDQAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"left_delete",
					null,
					"AQAAACINAAAAAAAAIg0AAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAIw0AAAAAAAAjDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server/server.lua",
			"settings":
			{
				"buffer_size": 20474,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					87,
					1,
					"lua_format",
					null,
					"",
					"AQAAAAAAAAABAAAArxoAAAAAAACvGgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					2,
					"left_delete",
					null,
					"AgAAANkaAAAAAAAA2RoAAAAAAAA3AAAAICAgICAgICAgICAgICAgICAgICAgICAgT2JzZXJ2YXRpb25zID0gZWw/Lm9ic2VydmF0aW9uc9gaAAAAAAAA2BoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEBsAAAAAAADZGgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"lua_format",
					null,
					"",
					"AQAAAAAAAAABAAAAHBkAAAAAAAAcGQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAANQYAAAAAAAA1BgAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAA1RgAAAAAAADVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"lua_format",
					null,
					"",
					"AQAAAAAAAAABAAAA4RgAAAAAAADhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"left_delete",
					null,
					"AQAAAMMYAAAAAAAAwxgAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAxBgAAAAAAADEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAMMYAAAAAAAAxBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxgAAAAAAADDGAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"lua_format",
					null,
					"",
					"AQAAAAAAAAABAAAA/xgAAAAAAAD/GAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte",
			"settings":
			{
				"buffer_size": 1964,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKUBAAAAAAAApgEAAAAAAAAAAAAApgEAAAAAAACoAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAKgBAAAAAAAAegIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAEAAAAAAACoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "observations"
					},
					"DQAAALIBAAAAAAAAswEAAAAAAAAAAAAAswEAAAAAAACzAQAAAAAAAAQAAABkYXRhswEAAAAAAAC0AQAAAAAAAAAAAAC0AQAAAAAAALUBAAAAAAAAAAAAALUBAAAAAAAAtgEAAAAAAAAAAAAAtgEAAAAAAAC3AQAAAAAAAAAAAAC3AQAAAAAAALgBAAAAAAAAAAAAALgBAAAAAAAAuQEAAAAAAAAAAAAAuQEAAAAAAAC6AQAAAAAAAAAAAAC6AQAAAAAAALsBAAAAAAAAAAAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAC9AQAAAAAAAL4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "Observations"
					},
					"DQAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADMAQAAAAAAAAQAAABEYXRhzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAANQBAAAAAAAA1QEAAAAAAAAAAAAA1QEAAAAAAADWAQAAAAAAAAAAAADWAQAAAAAAANcBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywEAAAAAAADPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "Open"
					},
					"BQAAAHMCAAAAAAAAdAIAAAAAAAAAAAAAdAIAAAAAAAB0AgAAAAAAAAQAAABWaWV3dAIAAAAAAAB1AgAAAAAAAAAAAAB1AgAAAAAAAHYCAAAAAAAAAAAAAHYCAAAAAAAAdwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwIAAAAAAAB3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABlAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwMAAAAAAABjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAGUDAAAAAAAAUQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQMAAAAAAABlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"paste",
					null,
					"AgAAADsCAAAAAAAASgIAAAAAAAAAAAAASgIAAAAAAABKAgAAAAAAAAwAAABvcGVuVmlld0RhdGE",
					"AQAAAAAAAAABAAAAOwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\nimport"
					},
					"CAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALAAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAALEAAAAAAAAAwgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMcAAAAAAAAAyAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMgAAAAAAAAAygAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "./"
					},
					"AgAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAMoAAAAAAAAAygAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAywAAAAAAAADLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "./../"
					},
					"BQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "../"
					},
					"AwAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Apps\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Apps\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":41},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Apps"
					},
					"AQAAANIAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAANYAAAAAAAAA1gAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Search\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Search\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":46},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Search"
					},
					"AQAAANcAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QAAAAAAAADdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Data\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Data\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":53},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Data"
					},
					"AQAAAN4AAAAAAAAA4gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					2,
					"left_delete",
					null,
					"AgAAANcAAAAAAAAA1wAAAAAAAAAMAAAAU2VhcmNoL0RhdGEv1gAAAAAAAADWAAAAAAAAAAEAAAAv",
					"AQAAAAAAAAABAAAA4wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Search\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Search\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":46},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Search"
					},
					"AQAAANcAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QAAAAAAAADdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					15,
					"left_delete",
					null,
					"DwAAAN0AAAAAAAAA3QAAAAAAAAABAAAAL9wAAAAAAAAA3AAAAAAAAAABAAAAaNsAAAAAAAAA2wAAAAAAAAABAAAAY9oAAAAAAAAA2gAAAAAAAAABAAAActkAAAAAAAAA2QAAAAAAAAABAAAAYdgAAAAAAAAA2AAAAAAAAAABAAAAZdcAAAAAAAAA1wAAAAAAAAABAAAAU9YAAAAAAAAA1gAAAAAAAAABAAAAL9UAAAAAAAAA1QAAAAAAAAABAAAAc9QAAAAAAAAA1AAAAAAAAAABAAAAcNMAAAAAAAAA0wAAAAAAAAABAAAAcNIAAAAAAAAA0gAAAAAAAAABAAAAQdEAAAAAAAAA0QAAAAAAAAABAAAAL9AAAAAAAAAA0AAAAAAAAAABAAAALs8AAAAAAAAAzwAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"left_delete",
					null,
					"AQAAAM4AAAAAAAAAzgAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAM4AAAAAAAAAzwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgAAAAAAAADOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Report\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Report\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":38},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Report"
					},
					"AQAAAM8AAAAAAAAA1QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":19,\"label\":\"Modals\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"directory\",\"name\":\"Modals\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":45},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "Modals"
					},
					"AQAAANYAAAAAAAAA3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANwAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"sortText\":\"11\",\"kind\":17,\"label\":\"ObservationsModal.svelte\",\"data\":{\"uri\":\"file:///e%3A/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte\",\"kind\":\"script\",\"name\":\"ObservationsModal.svelte\",\"kindModifiers\":\"\",\"position\":{\"line\":5,\"character\":52},\"sortText\":\"11\"}}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "ObservationsModal.svelte"
					},
					"AQAAAN0AAAAAAAAA9QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QAAAAAAAADdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"left_delete",
					null,
					"AQAAAIMHAAAAAAAAgwcAAAAAAAAQAAAACTxkaXYgaWQ9ImlkIiAvPg",
					"AQAAAAAAAAABAAAAkwcAAAAAAACDBwAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwFAAAAAAAA/QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AUAAAAAAAD8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "bind:this"
					},
					"CQAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD/BQAAAAAAAAAAAAD/BQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAQYAAAAAAAAAAAAAAQYAAAAAAAACBgAAAAAAAAAAAAACBgAAAAAAAAMGAAAAAAAAAAAAAAMGAAAAAAAABAYAAAAAAAAAAAAABAYAAAAAAAAFBgAAAAAAAAAAAAAFBgAAAAAAAAYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QUAAAAAAAD9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-svelte\",\"item\":{\"insertTextFormat\":2,\"documentation\":{\"kind\":\"markdown\",\"value\":\"To get a reference to a DOM node, use bind:this. If used on a component, gets a reference to that component instance.\"},\"kind\":12,\"label\":\"bind:this\",\"textEdit\":{\"newText\":\"bind:this=\\\"$1\\\"\",\"range\":{\"end\":{\"line\":80,\"character\":8},\"start\":{\"line\":80,\"character\":6}}}}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							74,
							138,
							2
						],
						"trigger": "bind:this"
					},
					"CQAAAAUGAAAAAAAABQYAAAAAAAABAAAAcwQGAAAAAAAABAYAAAAAAAABAAAAaQMGAAAAAAAAAwYAAAAAAAABAAAAaAIGAAAAAAAAAgYAAAAAAAABAAAAdAEGAAAAAAAAAQYAAAAAAAABAAAAOgAGAAAAAAAAAAYAAAAAAAABAAAAZP8FAAAAAAAA/wUAAAAAAAABAAAAbv0FAAAAAAAA/QUAAAAAAAACAAAAYmn9BQAAAAAAAAkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgYAAAAAAAAGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAcGAAAAAAAABwYAAAAAAAABAAAAIgcGAAAAAAAABwYAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAACAYAAAAAAAAIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAcGAAAAAAAACQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"paste",
					null,
					"AQAAAAgGAAAAAAAAEQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAYAAAAAAAAIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"paste",
					null,
					"AgAAAAgFAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAARBQAAAAAAAB0AAABkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWQnKQ",
					"AQAAAAAAAAABAAAAJQUAAAAAAAAIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"paste",
					null,
					"AQAAAJQBAAAAAAAAnQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAEAAAAAAACUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAIUDAAAAAAAAhgMAAAAAAAAAAAAAhgMAAAAAAACGAwAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAAhgMAAAAAAACFAwAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAABEEAAAAAAAAEgQAAAAAAAAAAAAAEgQAAAAAAAAUBAAAAAAAAAAAAAAUBAAAAAAAABUEAAAAAAAAAAAAABUEAAAAAAAAFgQAAAAAAAAAAAAAFgQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQQAAAAAAAARBAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABkEAAAAAAAAGwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQQAAAAAAAAZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "obs"
					},
					"AwAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAB0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgQAAAAAAAAaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"paste",
					null,
					"AgAAABoEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAdBAAAAAAAAAMAAABvYnM",
					"AQAAAAAAAAABAAAAGgQAAAAAAAAdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"DAAAABQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAVBAAAAAAAAAUAAABwcmludBUEAAAAAAAAFgQAAAAAAAAAAAAAFgQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGQQAAAAAAAAAAAAAGQQAAAAAAAAaBAAAAAAAAAAAAAAaBAAAAAAAABsEAAAAAAAAAAAAABsEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAdBAAAAAAAAAAAAAAdBAAAAAAAAB4EAAAAAAAAAAAAAB4EAAAAAAAAHwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAZBAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"monokai pro",
				"Monokai Pro: select theme"
			],
			[
				"format",
				"LSP: Format File"
			],
			[
				"terminal",
				"Preferences: Terminal Settings – Default"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"ci",
				"Convert Case: Title Case"
			],
			[
				"install ",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/client",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server"
	],
	"file_history":
	[
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/InfoAssigment.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Search/addBolo.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Report/SearchReports.svelte",
		"/C/Users/eduar/AppData/Roaming/Sublime Text/Packages/User/Theme - Monokai Pro.sublime-settings",
		"/C/Users/eduar/AppData/Roaming/Sublime Text/Packages/Theme - Monokai Pro/Theme - Monokai Pro.sublime-settings",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/App.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Mytool/MyTool.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server/server.lua",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/SideTab.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Report/Modals/ObservationsModal.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/client/client.lua",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Report/Report.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/client/nuiCallbacks.lua",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/config.lua",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/StartMenu.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/WindowsBar.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Report/LiveReports.svelte",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/utils/i18n.ts",
		"/C/Users/eduar/AppData/Roaming/Sublime Text/Packages/Terminal/Terminal.sublime-settings",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/.gitignore",
		"/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/CCallsign.svelte",
		"/C/Program Files/Sublime Text/Packages/fivem.sublime-completions",
		"/C/Users/eduar/Downloads/fivem-natives-completions-master/completions/fivem.sublime-completions",
		"/C/Users/eduar/Downloads/fivem.sublime-completions",
		"/C/Users/eduar/AppData/Roaming/Sublime Text/Packages/ActionScript.sublime-package"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"contain",
			"search window",
			"openActionmenu",
			"Reportes",
			"ReloadData",
			"}",
			"newFunction",
			"getMycalls",
			"Reports",
			"useNuiEvent",
			"sendUpdateCalls",
			"deleteReport",
			"console.log",
			"data.",
			"updateReport",
			"ID.",
			"IsPolice",
			"updateReport"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6633,
						"regions":
						{
						},
						"selection":
						[
							[
								3291,
								3291
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'`/@<>*#$+^([@-:|",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-svelte"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/SearchUser.svelte",
							"show_definitions": false,
							"syntax": "Packages/Svelte/Svelte.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1955.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/server/server.lua",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20474,
						"regions":
						{
						},
						"selection":
						[
							[
								6398,
								6400
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/server/server.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2067.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/E/txData/QBCoreFramework_new/resources/[jerico]/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1964,
						"regions":
						{
						},
						"selection":
						[
							[
								1358,
								1358
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'`/@<>*#$+^([@-:|",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-svelte"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///E:/txData/QBCoreFramework_new/resources/%5Bjerico%5D/fx-algo/nui/src/Pages/Apps/Search/Data/ActiveBolos.svelte",
							"show_definitions": false,
							"syntax": "Packages/Svelte/Svelte.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.diagnostics":
	{
		"height": 145.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 126.0
	},
	"pinned_build_system": "",
	"project": "jerico.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
